{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  getMovies(token) {\n    const headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'Token': `${token}`\n    });\n    const options = {\n      headers\n    };\n    console.log('tokenFromMovie', headers);\n    return this.http.get(`${this.apiUrl}/movies`, options);\n  }\n  addMovie(movieData) {\n    return this.http.post(`${this.apiUrl}/addmovie`, movieData);\n  }\n  bookmarkMovie(movieId, token) {\n    // Create headers with the token\n    const headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Token': `${token}`\n    });\n    // Define HTTP options with the headers\n    const options = {\n      headers\n    };\n    // Construct the URL for the API endpoint\n    const url = `${this.apiUrl}/bookmark/${movieId}`;\n    // Make the HTTP POST request with headers and options\n    return this.http.post(url, null, options);\n  }\n  getMovieDetails(movieId) {\n    // Define the API endpoint for fetching movie details by movieId\n    const url = `${this.apiUrl}/movies/${movieId}`;\n    // console.log('id service',movieId)\n    // Send an HTTP GET request to the endpoint\n    return this.http.get(url);\n  }\n}\n_class = MovieService;\n_class.ɵfac = function MovieService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","MovieService","constructor","http","apiUrl","getMovies","token","headers","options","console","log","get","addMovie","movieData","post","bookmarkMovie","movieId","url","getMovieDetails","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  private apiUrl = 'http://localhost:3000'; \n\n  constructor(private http: HttpClient) { }\n  getMovies(token: string): Observable<any> {\n\n    const headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\":\"*\",\n      'Token': `${token}` ,\n    });\n    const options = { headers };\n    console.log('tokenFromMovie', headers)\n    return this.http.get(`${this.apiUrl}/movies`, options);\n  }\n\n  addMovie(movieData: any) {\n    return this.http.post(`${this.apiUrl}/addmovie`, movieData);\n  }\n\n  bookmarkMovie(movieId: string, token: string): Observable<any> {\n    // Create headers with the token\n    const headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*', // Note: This header may not be needed for all requests\n      'Token': `${token}`,\n    });\n  \n    // Define HTTP options with the headers\n    const options = { headers };\n  \n    // Construct the URL for the API endpoint\n    const url = `${this.apiUrl}/bookmark/${movieId}`;\n  \n    // Make the HTTP POST request with headers and options\n    return this.http.post(url, null, options);\n  }\n  \n  \n  \n\n  getMovieDetails(movieId: string): Observable<any> {\n    // Define the API endpoint for fetching movie details by movieId\n    const url = `${this.apiUrl}/movies/${movieId}`;\n    // console.log('id service',movieId)\n    // Send an HTTP GET request to the endpoint\n    return this.http.get<any>(url);\n  }\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAEA;EACxCC,SAASA,CAACC,KAAa;IAErB,MAAMC,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,6BAA6B,EAAC,GAAG;MACjC,OAAO,EAAE,GAAGM,KAAK;KAClB,CAAC;IACF,MAAME,OAAO,GAAG;MAAED;IAAO,CAAE;IAC3BE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,OAAO,CAAC;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,MAAM,SAAS,EAAEI,OAAO,CAAC;EACxD;EAEAI,QAAQA,CAACC,SAAc;IACrB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACV,MAAM,WAAW,EAAES,SAAS,CAAC;EAC7D;EAEAE,aAAaA,CAACC,OAAe,EAAEV,KAAa;IAC1C;IACA,MAAMC,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,6BAA6B,EAAE,GAAG;MAClC,OAAO,EAAE,GAAGM,KAAK;KAClB,CAAC;IAEF;IACA,MAAME,OAAO,GAAG;MAAED;IAAO,CAAE;IAE3B;IACA,MAAMU,GAAG,GAAG,GAAG,IAAI,CAACb,MAAM,aAAaY,OAAO,EAAE;IAEhD;IACA,OAAO,IAAI,CAACb,IAAI,CAACW,IAAI,CAACG,GAAG,EAAE,IAAI,EAAET,OAAO,CAAC;EAC3C;EAKAU,eAAeA,CAACF,OAAe;IAC7B;IACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACb,MAAM,WAAWY,OAAO,EAAE;IAC9C;IACA;IACA,OAAO,IAAI,CAACb,IAAI,CAACQ,GAAG,CAAMM,GAAG,CAAC;EAChC;;SAjDWhB,YAAY;;mBAAZA,MAAY,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAZrB,MAAY;EAAAsB,OAAA,EAAZtB,MAAY,CAAAuB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}