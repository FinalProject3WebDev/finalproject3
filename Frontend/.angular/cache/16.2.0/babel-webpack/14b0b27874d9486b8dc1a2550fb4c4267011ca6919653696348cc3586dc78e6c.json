{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  getMovies(token) {\n    const headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\",\n      'Token': `${token}`\n    });\n    const options = {\n      headers\n    };\n    console.log('tokenFromMovie', headers);\n    return this.http.get(`${this.apiUrl}/movies`, options);\n  }\n  addMovie(movieData) {\n    return this.http.post(`${this.apiUrl}/addmovie`, movieData);\n  }\n  getHeaders() {\n    const token = 'your_auth_token_here'; // Replace with your authentication token logic\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    console.log('bookmark', token);\n  }\n  bookmarkMovie(movieId) {\n    const url = `${this.apiUrl}/bookmark/${movieId}`;\n    return this.http.post(url, null, {\n      headers: this.getHeaders()\n    });\n  }\n  getMovieDetails(movieId) {\n    // Define the API endpoint for fetching movie details by movieId\n    const url = `${this.apiUrl}/movies/${movieId}`;\n    console;\n    // Send an HTTP GET request to the endpoint\n    return this.http.get(url);\n  }\n}\n_class = MovieService;\n_class.ɵfac = function MovieService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","MovieService","constructor","http","apiUrl","getMovies","token","headers","options","console","log","get","addMovie","movieData","post","getHeaders","bookmarkMovie","movieId","url","getMovieDetails","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  private apiUrl = 'http://localhost:3000'; \n\n  constructor(private http: HttpClient) { }\n  getMovies(token: string): Observable<any> {\n\n    const headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\":\"*\",\n      'Token': `${token}` ,\n    });\n    const options = { headers };\n    console.log('tokenFromMovie', headers)\n    return this.http.get(`${this.apiUrl}/movies`, options);\n  }\n\n  addMovie(movieData: any) {\n    return this.http.post(`${this.apiUrl}/addmovie`, movieData);\n  }\n\n  private getHeaders(): HttpHeaders {\n    const token = 'your_auth_token_here'; // Replace with your authentication token logic\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    console.log('bookmark',token)\n  }\n\n  bookmarkMovie(movieId: string): Observable<any> {\n    const url = `${this.apiUrl}/bookmark/${movieId}`;\n    return this.http.post(url, null, { headers: this.getHeaders() });\n  }\n\n  getMovieDetails(movieId: string): Observable<any> {\n    // Define the API endpoint for fetching movie details by movieId\n    const url = `${this.apiUrl}/movies/${movieId}`;\nconsole\n    // Send an HTTP GET request to the endpoint\n    return this.http.get<any>(url);\n  }\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB;EAEA;EACxCC,SAASA,CAACC,KAAa;IAErB,MAAMC,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,6BAA6B,EAAC,GAAG;MACjC,OAAO,EAAE,GAAGM,KAAK;KAClB,CAAC;IACF,MAAME,OAAO,GAAG;MAAED;IAAO,CAAE;IAC3BE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,OAAO,CAAC;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,MAAM,SAAS,EAAEI,OAAO,CAAC;EACxD;EAEAI,QAAQA,CAACC,SAAc;IACrB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACV,MAAM,WAAW,EAAES,SAAS,CAAC;EAC7D;EAEQE,UAAUA,CAAA;IAChB,MAAMT,KAAK,GAAG,sBAAsB,CAAC,CAAC;IACtC,OAAO,IAAIN,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;IACFG,OAAO,CAACC,GAAG,CAAC,UAAU,EAACJ,KAAK,CAAC;EAC/B;EAEAU,aAAaA,CAACC,OAAe;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACd,MAAM,aAAaa,OAAO,EAAE;IAChD,OAAO,IAAI,CAACd,IAAI,CAACW,IAAI,CAACI,GAAG,EAAE,IAAI,EAAE;MAAEX,OAAO,EAAE,IAAI,CAACQ,UAAU;IAAE,CAAE,CAAC;EAClE;EAEAI,eAAeA,CAACF,OAAe;IAC7B;IACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACd,MAAM,WAAWa,OAAO,EAAE;IAClDR,OAAO;IACH;IACA,OAAO,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAMO,GAAG,CAAC;EAChC;;SAzCWjB,YAAY;;mBAAZA,MAAY,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAZtB,MAAY;EAAAuB,OAAA,EAAZvB,MAAY,CAAAwB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}